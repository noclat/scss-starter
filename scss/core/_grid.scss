/**
 * Grid
 * ------------------------------
 * Dependencies:
 * - _breakpoints.scss
 * - $breakpoints
 * - $unit
 *
 * How to use:

.grid {
    @include grid($unit); // argument is gutter width

    &-row {
        @include row((sm: 2, md: 3, lg: 4));
    }

    &-cell {
        // default is 1 column wide

        &:last-child { // modifiers
            @include column((sm: 2, md: 1, lg: 2));
            @include offset((md: 1, xl: 0));
            @include order((sm:1, md:0));
        }
    }
}

 */


// GLOBAL MIXINS
// ------------------------------
// Global variables
// NOTE: not meant to be set manually
// but it could happen, in case of nested grids
// if you need to reset the columns number after declaring a child grid
$grid-columns: (xs: 12) !default;
$grid-gutter: $unit !default;


// Grid container
@mixin grid($gutter: null) {
    @if $gutter != null { $grid-gutter: $gutter !global; }

    padding-left: $grid-gutter/2;
    padding-right: $grid-gutter/2;
}


// Number of columns in row
@mixin row($columns: null) {
    @if type-of($columns) == map { $grid-columns: $columns !global; }

    display: flex;
    flex-wrap: wrap;

    margin-left: -$grid-gutter/2;
    margin-right: -$grid-gutter/2;

    & > * {
        flex: 0 0 auto;

        margin-left: $grid-gutter/2;
        margin-right: $grid-gutter/2;

        // children are equally-sized columns by default
        @include column((xs: 1), $grid-columns);
    }
}


// Size of a column
@mixin column($sizes, $columns: null, $default: 1) {
    @if type-of($columns) == map { $grid-columns: $columns !global; }
    $sizes: grid-sizes($sizes, $grid-columns, $default);
    @each $key, $value in $sizes {
        @include breakpoint-up($key) {
            $w: calc(#{$value} - #{$grid-gutter});
            flex-basis: $w;
            max-width: $w;
        }
    }
}


// Offset column
@mixin offset($sizes, $columns: null, $default: 0) {
    @if type-of($columns) == map { $grid-columns: $columns !global; }
    $sizes: grid-sizes($sizes, $grid-columns, $default);
    @each $key, $value in $sizes {
        $w: calc(#{$value} + #{$grid-gutter/2});
        @include breakpoint-up($key) {
            margin-left: $w;
            margin-right: $grid-gutter/2;
        }
    }
}


// Set order
@mixin order($orders, $default: 0) {
    $orders: grid-compute-breakpoints($orders, $default);
    @each $key, $value in $orders {
        @include breakpoint-up($key) {
            order: $value;
        }
    }
}



// SIZE HELPERS
// ------------------------------
// Get map of column sizes in percentage by breakpoint
// NOTE: ex: for 4 columns, (md: 2) becomes (xs: 25%, sm: 25%, md: 50%, lg: 50%, xl: 50%)
@function grid-sizes($sizes, $columns, $default) {
    // compute the number of columns and the current column sizes for each breakpoint
    $_columns: grid-compute-breakpoints($columns);
    $_sizes: grid-compute-breakpoints($sizes, $default);

    $output: ();
    @each $key in $_breakpoints-keys {
        // add breakpoint if the columns number or the current column size changes
        @if map-has-key($columns, $key) or map-has-key($sizes, $key) {
            // get the number of columns and the current column size
            $total: map-get($_columns, $key);
            $size: map-get($_sizes, $key);

            // add computed size in percents
            $output: map-merge($output, ("#{$key}": 100%/$total*$size));
        }
    }
    @return $output;
}

// Make values persist through following breakpoints
// NOTE: ex: (md: 1) becomes (xs: 0, sm: 0, md: 1, lg: 1, xl: 1)
@function grid-compute-breakpoints($map, $default: 1) {
    $output: $breakpoints;
    $value: $default;
    @each $key, $val in $output {
        @if (map-has-key($map, $key)) {
            $value: map-get($map, $key);
        }
        $output: map-merge($output, ("#{$key}": $value));
    }
    @return $output;
}



// OPTIONS
// NOTE: should be extended next to the row() include
// NOTE: ex: `@extend %between-xs, %middle-md, %equal-lg;`
// ------------------------------
@each $key in $_breakpoints-keys {
    // Vertical: alignement of direct children
    $map: (bottom: flex-end, top: flex-start, middle: center, equal: stretch);
    @each $name, $property in $map {
        %#{$name}-#{$key} {
            @include breakpoint-up($key) {
                align-items: $property;
            }
        }
    }

    // Horizontal: distribution of direct children
    $map: (start: flex-end, end: flex-start, center: center, between: space-between, around: space-around);
    @each $name, $property in $map {
        %#{$name}-#{$key} {
            @include breakpoint-up($key) {
                justify-content: $property;
            }
        }
    }
}
